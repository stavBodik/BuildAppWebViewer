<!DOCTYPE html>
<html>
<head>
    <title>BuildApp</title>

    <script src="libs/three.js?n=1"></script>

    <script src="libs/Detector.js"></script>
    <script src="libs/wheel.js"></script>
    <script src="Wall.js?n=2"></script>
    <script src="Floor.js?n=2"></script>
    <script src="Door.js?n=2"></script>
    <script src="Room.js"></script>
    <script src="LoadModel.js"></script>
    <script src="Load3dObjs.js?n=3"></script>
    <script src="libs/XMLParser.js"></script>
    <script src="libs/OBJMTLLoader.js"></script>
    <script src="libs/OBJLoader.js"></script>
    <script src="libs/MTLLoader.js"></script>
    <script src="libs/TrackballControls.js"></script>
    <!--<script src="libs/OrbitControls.js"></script>-->
    <script src="libs/QueryData.js"></script>


</head>
<body>
<div id="WebGLCanvas" />


<!--shaders -->
<script type="application/x-glsl" id="sky-vertex">  
varying vec2 vUV;

void main() {  
  vUV = uv;
  vec4 pos = vec4(position, 1.0);
  gl_Position = projectionMatrix * modelViewMatrix * pos;
}
</script>

<script type="application/x-glsl" id="sky-fragment">  
uniform sampler2D texture;  
varying vec2 vUV;

void main() {  
  vec4 sample = texture2D(texture, vUV);
  gl_FragColor = vec4(sample.xyz, sample.w);
}
</script>



<script>
    var scene;
    var camera;
    var model;
    var dict = {};

    var yRot = 0;
    var xRot = 0;
    var xSpeed = 0;

    var ySpeed = 0;

    var zoom = 1;

    var mouseDown = false;
    var lastMouseX = null;
    var lastMouseY = null;

    var m_room;
    var m_floor1, m_floor2;

    var cx, cy, cz;
    var d;

    var defaultTextureFile = "wall.png";
    var defaultTexture = new THREE.ImageUtils.loadTexture(defaultTextureFile);
    var defaultMaterial = new THREE.MeshBasicMaterial({ map: defaultTexture, side: THREE.DoubleSide });

    var m_controls;

    var FLY_MODE = 2;
    var ROTATE_3D = 0;
    var WALK_THROUGH = 1;
    var navigationMode = 0;

    var sphere;


    init();

    animate();

    /**
     * Initialze the scene.
     */
    function init() {



        if (Detector.webgl) {
            renderer = new THREE.WebGLRenderer({ antialias: true });
            // If its not supported, instantiate the canvas renderer to support all non WebGL
            // browsers
        } else {
            renderer = new THREE.CanvasRenderer();
        }
        // Set the background color of the renderer to black, with full opacity
        renderer.setClearColor(0x000000, 1);
        // Get the size of the inner window (content area) to create a full size renderer
        canvasWidth = window.innerWidth;
        canvasHeight = window.innerHeight;
        // Set the renderers size to the content areas size
        renderer.setSize(canvasWidth, canvasHeight);
        // Get the DIV element from the HTML document by its ID and append the renderers DOM
        // object to it
        document.getElementById("WebGLCanvas").appendChild(renderer.domElement);

        // Create the scene, in which all objects are stored (e. g. camera, lights,
        // geometries, ...)
        scene = new THREE.Scene();

        camera = new THREE.PerspectiveCamera(45, canvasWidth / canvasHeight, 1, 1000);


        scene.add(camera);

        model = new THREE.Object3D();
        scene.add(model);

        /*SKY-BOX*/


// 		//debug:
//  		var boxGeometry = new THREE.Box3(10, 10, 10);
//  		var material = new THREE.MeshBasicMaterial({color: 0xfffff, wireframe: false});
//  		var myCube = new THREE.Mesh(boxGeometry, material);
//   		scene.add(myCube);

// var size = 10;
// var step = 1;

// // var gridHelper = new THREE.GridHelper( size, step );
// // scene.add( gridHelper );

//  var geometry = new THREE.SphereGeometry(3000, 60, 40);
        var geometry = new THREE.SphereGeometry(300, 60, 40);
        var skyTexture = new THREE.ImageUtils.loadTexture('images/skydome.png');
        var uniforms = {
            texture: { type: 't', value: skyTexture }
        };





        var material = new THREE.ShaderMaterial( {
            uniforms:       uniforms,
            vertexShader:   document.getElementById('sky-vertex').textContent,
            fragmentShader: document.getElementById('sky-fragment').textContent
        });

        skyBox = new THREE.Mesh(geometry, material);
        skyBox.scale.set(-1, 1, 1);
        skyBox.eulerOrder = 'XYZ';
        skyBox.renderDepth = 1000.0;

        skyBox.rotation.z += 3*Math.PI/2;
// skyBox.rotation.y += Math.PI;
        scene.add(skyBox);

        /*endSKYBOX*/

        /*SURFACE*/


        m_room = new Room();

        var getData = new QueryData();


        var modelURL = getData.modelURL;
//         modelURL = "models/1368360779/data";
//         modelURL = "models/test2/data";



        if (modelURL == null)
            modelURL = "models/Sample/data";

        var xmlFile = modelURL + "/MyRoomData.plist";

        readXML(xmlFile, dict);


        loadModel(modelURL);

        var externObjectsDir = "ExternObjects";

        load3dObjs(externObjectsDir);


        calcBound();

        calcLookAt();

         m_controls = new THREE.TrackballControls(camera);
         m_controls.rotateSpeed = 3.0;
         m_controls.noPan = false;
         m_controls.staticMoving = true;
         m_controls.target = new THREE.Vector3(cx, 0, cz);
         m_controls.maxDistance = 70;
         m_controls.maxAngle = 90;

//         m_controls.addEventListener('change', render);
//        setOrbitControl();




        var ambientLight = new THREE.AmbientLight(0x808080);
        scene.add(ambientLight);

        var pointLight = new THREE.PointLight( 0xffffff, 1, 1000 );
        pointLight.position.set(0, 100, 1000);
        scene.add(pointLight);



        var directionalLight = new THREE.DirectionalLight(0xffffff, 1.0);
        directionalLight.position.set(0, 1000, 1000);
        scene.add(directionalLight);

        //            new Wall(new Vertex(2, 10), new Vertex(10, 10), 2.5, 0.1, "crate.gif", "logo.png");
        //            new Wall(new Vertex(10, 2), new Vertex(10, 10), 2.5, 0.1, "logo.png", "crate.gif");

//         document.onkeydown = handleKeyDown;
//         document.onkeyup = handleKeyUp;


//         document.onmousedown = handleMouseDown;
//         document.onmouseup = handleMouseUp;
//         document.onmousemove = handleMouseMove;


//         document.addEventListener("touchstart", onTouchStart);
//         document.addEventListener("touchmove", onTouchMove);
//         document.addEventListener("touchend", onTouchEnd);

//         window.addEventListener('resize', onWindowResize, false);

    }



    function calcBound() {
        m_room.calcBound();
        cx = (m_room.minX + m_room.maxX) / 2;
        cz = (m_room.minZ + m_room.maxZ) / 2;
        cy = (m_room.minY + m_room.maxY) / 2;
        d = m_room.maxX - m_room.minX;
    }

    function calcLookAt() {
        var fov = deg2Rad(45.0 / 2.0);
        var r = d / 2.0;
        var L = r / Math.tan(fov);
        var tilt = deg2Rad(30.0);
        eyeY = L * Math.sin(tilt) + cy;
        eyeX = cx;
        eyeZ = L * Math.cos(tilt) + cz;
        upX = 0;
        upY = Math.cos(tilt);
        upZ = -Math.sin(tilt);
        camera.position.set(eyeX, eyeY, eyeZ);
        camera.up.set(upX, upY, upZ);
        camera.lookAt(new THREE.Vector3(cx, cy, cz));
    }




    function deg2Rad(deg) {
        var rad = Math.PI / 180 * deg;
        return rad;
    }
    /* Render the scene. Map the 3D world to the 2D screen.
     */

    var rotationMatrix, translationMatrix;


    function animate() {
        requestAnimationFrame(animate);
        m_controls.update();
        render();
    }

    function render() {

//         model.matrix.identity();
//         model.applyMatrix(new THREE.Matrix4().makeTranslation(new THREE.Vector3(-cx, -cy, -cz)));
//         model.applyMatrix(new THREE.Matrix4().makeRotationX(deg2Rad(xRot)));
//         model.applyMatrix(new THREE.Matrix4().makeRotationY(deg2Rad(yRot)));
//         model.applyMatrix(new THREE.Matrix4().makeTranslation(new THREE.Vector3(cx, cy, cz)));



//         rotateAroundObjectAxis(model, new THREE.Vector3(1,0,0), deg2Rad(xRot));
//         rotateAroundObjectAxis(model, new THREE.Vector3(0,1,0), deg2Rad(yRot));

//         model.applyMatrix(new THREE.Matrix4().makeTranslation(new THREE.Vector3(-cx, -cy, -cz)));
//         model.applyMatrix(new THREE.Matrix4().makeScale(new THREE.Vector3(zoom, zoom, zoom)));
//         model.applyMatrix(new THREE.Matrix4().makeTranslation(new THREE.Vector3(cx, cy, cz)));

        renderer.render(scene, camera);
    }

    // Rotate an object around an axis in object space
    var rotationMatrix
    function rotateAroundObjectAxis(object, axis, radians) {
        rotationMatrix = new THREE.Matrix4();
        rotationMatrix.makeRotationAxis(axis.normalize(), radians);
        object.matrix.multiplySelf(rotationMatrix); // post-multiply
        object.rotation.setEulerFromRotationMatrix(object.matrix, object.order);
    }

    // Rotate an object around an axis in world space (the axis passes through the object's position)
    var rotWorldMatrix;
    function rotateAroundWorldAxis(object, axis, radians) {
        rotWorldMatrix = new THREE.Matrix4();
        rotWorldMatrix.makeRotationAxis(axis.normalize(), radians);
        rotWorldMatrix.multiplySelf(object.matrix); // pre-multiply
        object.matrix = rotWorldMatrix;
        object.rotation.setEulerFromRotationMatrix(object.matrix, object.order);
    }

    var currentlyPressedKeys = {};


    function handleKeyUp(event) {
        currentlyPressedKeys[event.keyCode] = false;
    }

    function handleKeyDown(event) {
        currentlyPressedKeys[event.keyCode] = true;
        handleKeys();
    }




    function handleKeys() {
        if (currentlyPressedKeys[33]) {
            // Page Up
            zoom += 0.05;
        }
        if (currentlyPressedKeys[34]) {
            // Page Down
            zoom -= 0.05;
        }
        if (currentlyPressedKeys[37]) {
            // Left cursor key
            yRot -= 2;
        }
        if (currentlyPressedKeys[39]) {
            // Right cursor key
            yRot += 2;
        }
        if (currentlyPressedKeys[38]) {
            // Up cursor key
            xRot -= 2;
        }
        if (currentlyPressedKeys[40]) {
            // Down cursor key
            xRot += 2;
        }
    }



    function handleMouseDown(event) {
        mouseDown = true;
        lastMouseX = event.clientX;
        lastMouseY = event.clientY;
    }

    function handleMouseUp(event) {
        mouseDown = false;
    }


    function handleMouseMove(event) {
        if (!mouseDown) {
            return;
        }
        var newX = event.clientX;
        var newY = event.clientY;

        var deltaX = newX - lastMouseX
        yRot += deltaX / 2;

        var deltaY = newY - lastMouseY;
        xRot += deltaY / 2;

        lastMouseX = newX
        lastMouseY = newY;
    }

    /** This is high-level function.
     * It must react to delta being more/less than zero.
     */
    function handle(delta) {
        if (delta < 0)
            zoom -= 0.05;
        else
            zoom += 0.05;
    }


    function onTouchStart(event) {
        //            document.write("touch start: " + event.touches[0].pageX + ", " + event.touches[0].pageY);
        //            handleMouseDown(event);
        mouseDown = true;
        lastMouseX = event.touches[0].pageX;
        lastMouseY = event.touches[0].pageY;

    }
    function onTouchMove(event) {
        //            document.write("touch move");
        //            handleMouseMove(event);
        if (!mouseDown) {
            return;
        }
        var newX = event.touches[0].pageX;
        var newY = event.touches[0].pageY;

        var deltaX = newX - lastMouseX
        yRot += deltaX / 2;

        var deltaY = newY - lastMouseY;
        xRot += deltaY / 2;

        lastMouseX = newX
        lastMouseY = newY;

    }
    function onTouchEnd(event) {
        handleMouseUp(event);
    }

    function changeNavigationMode() {
        navigationMode += 1;
        navigationMode %=3;
        
    }

    function setOrbitControl() {
        controls = new THREE.OrbitControls( camera, renderer.domElement );
        //controls.addEventListener( 'change', render ); // add this only if there is no animation loop (requestAnimationFrame)
        controls.enableDamping = true;
        controls.dampingFactor = 0.25;
        controls.enableZoom = false;
    }





</script>





<div style="float:right; position:relative;right:80px;top:2px;">
    <img src="images\\\ic_3d_rotation_white_24dp.png" alt width="36px" height="36px" onclick="changeNavigationMode()" background="#363636"/>
    <button type="button" style="background-image: url(images\\\ic_3d_rotation_white_24dp.png); onclick="changeNavigationMode()"></button>
</div>

</body>

</html>
